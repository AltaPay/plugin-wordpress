name: 'Deployment'

# Only trigger, when the build workflow succeeded
on:
  workflow_run:
    workflows: ["PHP Code Analysis"]
    types:
      - completed
    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    
    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
          
    # Checkout plugin-infrastructure repository to the GitHub Actions runner    
    - uses: actions/checkout@v1  
      with:
        repository: AltaPay/plugin-infrastructure
        token: ${{ secrets.ACCESS_TOKEN }}
        ref: 'origin/main'

    # Install version 0.14.4 of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.4

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init 
      working-directory: ../plugin-infrastructure/provision/plugins


    # Select a terraform workspace
    - name: Terraform workspace
      run: terraform workspace select wordpress
      working-directory: ../plugin-infrastructure/provision/plugins
      
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ../plugin-infrastructure/provision/plugins

    # Run Terraform Apply      
    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -var ec2_type=t2.micro -auto-approve
      working-directory: ../plugin-infrastructure/provision/plugins
      
    # Add a sleep of 20 seconds, in case instance needs to warm up  
    - name: Sleep for 20 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '20s'

    # Export IP for use in cypress tests config
    - name: Export IP
      run: |
        testvar=$(sed '4!d' inventory)
        echo $testvar
        echo "IP=$testvar">> $GITHUB_ENV
        echo $IP
      working-directory: ../plugin-infrastructure/deploy/plugins


    # Setting branch name for running cypress tests
    - name: Set env TEST_BRANCH_NAME
      run: |
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
              echo "TEST_BRANCH_NAME=${{ github.head_ref }}" >> "$GITHUB_ENV"
          else
              echo "TEST_BRANCH_NAME=main" >> "$GITHUB_ENV"
          fi  	
  
    # Run Cypress tests   
    - uses: actions/checkout@v1
      with:
        repository: AltaPay/plugin-wordpress
        ref: 'origin/${{env.TEST_BRANCH_NAME}}'
        path: plugin-wordpress
             
    - name: Create Cypress fixture config json
      id: create-json-2  # Second ID
      uses: jsdaniell/create-json@1.1.2
      with:
        name: "config.json"
        json: '{"shopURL": "http://${{env.IP}}/wordpress","adminURL": "http://${{env.IP}}/wordpress/wp-admin","adminUsername": "${{secrets.SHOP_ADMIN_USERNAME}}","adminPass": "${{secrets.SHOP_ADMIN_PASS}}"}'
        dir: tests/integration-test/cypress/fixtures/
      
    - name: Install Cypress Dependencies 
      run: npm i
      working-directory: tests/integration-test
      
    - name: Run Cypress tests 
      run: ./node_modules/.bin/cypress run --config video=false
      working-directory: tests/integration-test
    
    # Run Ansible playbook
    - name: Run playbook
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: wordpress.yml
        directory: ../plugin-infrastructure/deploy/plugins
        key: ${{secrets.SSHKEY}}
        options: |
          -u ubuntu
          -i inventory
          --extra-vars "gatewayURL=${{ secrets.GATEWAYURL }} gatewayUser=${{ secrets.GATEWAYUSER }} gatewayPass=${{ secrets.GATEWAYPASS }}"   
